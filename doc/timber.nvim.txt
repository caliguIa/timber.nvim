*timber.nvim.txt* A plugin to quickly insert log statements and display log
results inline.

Author: Duc Nguyen <https://www.github.com/Goose97>
License: MIT License

==============================================================================
CONTENTS                                                *timber.nvim-contents*

  1. Introduction ................................. |timber.nvim-introduction|
  2. Actions ........................................... |timber.nvim-actions|
    2.1. Insert log statements .............. |timber.nvim-actions.insert-log|
    2.2. Insert batch log statements .. |timber.nvim-actions.insert-batch-log|
    2.3. Insert log operators ................ |timber.nvim-actions.operators|
    2.4. API ....................................... |timber.nvim-actions.api|
  3. Watchers ......................................... |timber.nvim-watchers|
    3.1. How it works ....................... |timber.nvim-watchers.algorithm|
    3.2. Sources .............................. |timber.nvim-watchers.sources|
    3.3. Markers .............................. |timber.nvim-watchers.markers|
  4. Buffers ........................................... |timber.nvim-buffers|
  5. Summary window .................................... |timber.nvim-summary|
    5.1. Keymaps ............................... |timber.nvim-summary.keymaps|
    5.2. API ....................................... |timber.nvim-summary.api|
  6. Configuration ...................................... |timber.nvim-config|
    6.1. Default configuration .................. |timber.nvim-config.default|
    6.2. Log templates .................... |timber.nvim-config.log-templates|
    6.3. Keymaps ................................ |timber.nvim-config.keymaps|
    6.4. Highlight ............................ |timber.nvim-config.highlight|

==============================================================================
1. Introduction                                     *timber.nvim-introduction*

|timber.nvim| is a plugin for quickly inserting log statements and capturing
their results right inside Neovim. This plugin uses Treesitter to
intelligently capture the log targets and determine log placements. It also
supports mass log insertion through visual mode. To capture the log results,
the plugin monitors different sources provided by the user, for example, a
log file.

|timber.nvim| has two main operations:

- Insert log statements to the buffer
- Capture and display log results inline

==============================================================================
2. Actions                                               *timber.nvim-actions*

------------------------------------------------------------------------------
2.1. Insert log statements                    *timber.nvim-actions.insert-log*

Insert log statements operates in two modes:

  1. Normal mode: Inserts a log statement for the log target at the cursor
  2. Visual mode: Inserts log statements for all log targets in the selection
     range

The add operation has two variations: above and below, which decides the
placement of the log statement. The default keymaps are:

  - `glj`: Add a log statement below ([G]o [L]og below)
  - `glk`: Add a log statement above ([G]o [L]og above)

Each operation requires a log template to be provided, and the log template
must supports the current filetype. The filetype is determined via
`vim.bo.filetype`. |timber.nvim| provides some templates out of the box, which
has a special template called `default`. The `default` template is used when no
template is provided.

In all of the following examples, we use the `default` template and default
keymaps. The `|` denotes the cursor position. If there're two `|`s, it means
we are in visual mode, and each `|` denotes the boundary of the selection range.

  Old text                    Command         New text ~
  --------------------------------------------------------------
  local str = "H|ello"        glj             local str = "Hello"
                                              print("str", str)
  --------------------------------------------------------------
  foo(st|r)                   glk             print("str", str)
                                              foo(str)
  --------------------------------------------------------------
  |local foo = bar + baz|     glj             local foo = bar + baz
                                              print("foo", foo)
                                              print("bar", bar)
                                              print("baz", baz)
  --------------------------------------------------------------
  |foo(bar, baz)|             glk             print("bar", bar)
                                              print("baz", baz)
                                              foo(bar, baz)

You can customize the content of the log statement by providing a template.
See |timber.nvim-config.templates| for more information.

------------------------------------------------------------------------------
2.2. Insert batch log statements        *timber.nvim-actions.insert-batch-log*

Batch log statements are log statements that capture multiple log targets.
Instead of having multiple log statements, we can group them into a single
one. For example: >lua

  local foo = bar + baz
  print(string.format("foo=%s, bar=%s, baz=%s", foo, bar, baz))
<
Two ways to use batch log are:

  1. Add batch log in Visual mode. It will capture all log targets in the
     selection range.
  2. Manually add log targets to the batch. After that, insert the batch
     log statement and empty the batch. While being more verbose, this allows
     greater control over which log targets are captured.

The default keymaps are:

  - *glb*: Add a batch log below ([G]o [L]og [B]atch)
  - *gla*: Add a batch log ([G]o [L]og [A]dd to batch)

In all of the following examples, we use the `default` template and default
keymaps. The `|` denotes the cursor position. If there're two `|`s, it means
we are in visual mode, and each `|` denotes the boundary of the selection range.

  Old text                    Command         New text ~
  ----------------------------------------------------------------------------------------------
  if |foo > bar| then         glb             if foo > bar then
    return nil				        print(string.format("foo=%s, bar=%s", foo, bar))
  end                                           return nil
                                              end
  ----------------------------------------------------------------------------------------------
  if f|oo > bar then          gla2wglaglb     if foo > bar then
    return nil				        print(string.format("foo=%s, bar=%s", foo, bar))
  end                                           return nil
                                              end

------------------------------------------------------------------------------
2.3. Operators                                 *timber.nvim-actions.operators*

|timber.nvim| provides operators for each of the above actions. The default
mappings are:

  - *g<S-l>j*: Add log statements below operator
  - *g<S-l>k*: Add log statements above operator
  - *g<S-l>b*: Add a batch log statement operator
  - *g<S-l>a*: Add log targets to the batch operator

For each action, the operator version works similar with the normal action in Visual
mode. For example, `g<S-l>ji(` will add log statements for all log targets inside the
parentheses. It equals to `vi(glj`.

------------------------------------------------------------------------------
2.4. API                                             *timber.nvim-actions.api*

Users can invoke actions via the API. Action APIs are defined in the
`timber.actions` module.

  :h timber.actions.insert_log
  :h timber.actions.insert_batch_log
  :h timber.actions.add_log_targets_to_batch
  :h timber.actions.clear_log_statements
  :h timber.actions.toggle_comment_log_statements
  :h timber.actions.search_log_statements


actions.insert_log({opts})                       *timber.actions.insert_log()*

  Insert a log statement. The behavior depends on the template provided:

    - If the template contains `%log_target` placeholder, capture the log
      target at the cursor position.
    - If the template contains NO `%log_target` placeholder, insert a log
      statement at the below and above line, depending on the `position` option.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {template}            (string)                Template for the log
                                                  statement. Default: "default"

    {templates}           (table)                 `{ before = string, after = string }`
                                                  Templates for the log
                                                  statement with "surround"
                                                  position. The `before`
                                                  template will be used for
                                                  the log statement above the
                                                  cursor, and the `after`
                                                  template will be used for the
                                                  log statement below the cursor.
                                                  If either templates are not
                                                  provided, use "default" template.

    {position}            (string)                Insert position for the
                                                  log statement. Supported
                                                  values: "above", "below",
                                                  "surround"

    {operator}            (boolean)               Whether to go use operator
                                                  mode. Default: false


actions.insert_batch_log({opts})           *timber.actions.insert_batch_log()*

  Insert a batch log statement.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {template}            (string)                Template for the batch log
                                                  statement. Default: "default"
    {auto_add}            (string)                Automatically add the log
                                                  the log targets the the
                                                  batch before inserting the batch
                                                  log. This field is `true` if
						  operator is `true`. Default: false
    {operator}            (boolean)               Whether to go use operator
                                                  mode. Default: false

  See: ~
    |timber.actions.add_log_targets_to_batch|


actions.add_log_targets_to_batch({opts})          *timber.actions.add_log_targets_to_batch()*

  Add a log target to the batch. In Visual mode, add all log targets in the
  selection range.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {operator}            (boolean)               Whether to go use operator
                                                  mode. Default: false

  See: ~
    |timber.actions.insert_batch_log|


actions.get_batch_size()                     *timber.actions.get_batch_size()*

  Get the number of log targets in the batch.

  Return: ~
    - integer


actions.clear_batch()                           *timber.actions.clear_batch()*

  Clear all log targets in the batch.


actions.clear_log_statements({opts})   *timber.actions.clear_log_statements()*

  Clear all log statements in the current buffer or all buffers.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {global}            (boolean)         Whether to clear all buffers (true)
                                          or just the current one (false).
					  Default: false


actions.toggle_comment_log_statements({opts})   *timber.actions.toggle_comment_log_statements()*

  Comment/uncomment all log statements in the current buffer or all buffers.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {global}            (boolean)         Whether to toggle all buffers (true)
                                          or just the current one (false).
					  Default: false


actions.search_log_statements({opts}) *timber.actions.search_log_statements()*

  Search log statements in all files using |telescope.nvim|.

==============================================================================
3. Watchers                                             *timber.nvim-watchers*

|timber.nvim| can capture the log results and display them inside Neovim. To
do this, users must configure a list of sources to watch:
>lua
  {
    log_watcher = {
      enabled = true,
      -- A table of source id and source configuration
      sources = {
	log_file = {
	  name = "Log file",
	  type = "filesystem",
	  path = "/tmp/debug.log",
	},
	neotest = {
	  name = "Neotest",
	  type = "neotest",
	},
      },
    }
  }
<
------------------------------------------------------------------------------
3.1. How it works                             *timber.nvim-watchers.algorithm*

The job of the watcher is to monitor the sources and capture the log results.
To do that, we mark the log results with special markers which can be extracted
by the watcher. Users can use the placeholder `%watcher_marker_start` and
`%watcher_marker_end` to mark the start and end of the log results. See
`timber.nvim-watchers.markers`.

For example, this log template:
>lua
  [[print("%watcher_marker_start" .. %log_target .. "%watcher_marker_end")]]
<
Will be expanded to:
>lua
  [[print("🪵ZGH|" .. foo .. "|ZGH")]]
<
And later on printed to stdout as:
>
  🪵ZGH|<log_content>|ZGH
<
During scanning the sources, the watcher recognizes these markers by the `🪵` prefix
and the marker ID. This ID is generated randomly for each log statement and acts
as an unique identifier. This allows us to know which log result belong to which
log statement.

------------------------------------------------------------------------------
3.2. Sources                                    *timber.nvim-watchers.sources*

The `sources` field in the `log_watcher` configuration is a list of sources for
the watcher to monitor. `timber.nvim` supports the following sources:

- filesystem: A file on the filesystem.

  Spec: ~

    {type}     (string)  The type of the source. Must be `filesystem`.
    {name}     (string)  The name of the source. This will be displayed in
			 the log results viewer.
    {path}     (string)  Absolute path of the file.

  If the file doesn't exist, `timber.nvim` will create the file.

- neotest: Test output from neotest.

  Spec: ~

    {type}     (string)  The type of the source. Must be `neotest`.
    {name}     (string)  The name of the source. This will be displayed in
			 the log results viewer.

  Users need to configure `neotest` consumer to use this source:
>lua
  require("neotest").setup({
    consumers = {
      timber = require("timber.watcher.sources.neotest").consumer,
    },
  })
<
------------------------------------------------------------------------------
3.3. Markers                                    *timber.nvim-watchers.markers*

`timber.nvim` supports quickly insert markers to log statements with `%watcher_marker_start`
and `%watcher_marker_end` placeholders. Remember, these markers denote the
start end end of the log content. Normally, your log content should be wrapped
between these two markers.
>lua
  require("timber").setup({
    log_templates = {
      default = {
	lua = [[print("%watcher_marker_start" .. %log_target .. "%watcher_marker_end")]]
      }
    }
  })

==============================================================================
4. Buffers                                               *timber.nvim-buffers*

`timber.buffers` module provides API to interact with the captured log results
in the buffers.

buffers.open_float({opts})                       *timber.buffers.open_float()*

  Open a floating window showing the captured log results.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {silent}            (boolean)             Whether to silent the notification
                                              if no log placeholder is found.
                                              Default: false

    {sort}              (string)              Sort order for the log entries.
                                              Supported values: "newest_first",
                                              "oldest_first". Default: "oldest_first"


buffers.clear_captured_logs()           *timber.buffers.clear_captured_logs()*

  Clear all captured log results in the buffers.

==============================================================================
5. Summary window                                        *timber.nvim-summary*

------------------------------------------------------------------------------
5.1. API                                             *timber.nvim-summary.api*

`timber.summary` module provides API to interact with the summary window. The
summary window displays all captured log output in a window.

summary.open({opts})                                   *timber.summary.open()*

  Open the summary window in a split window.

  Parameters: ~
    {opts} (table)  options to pass to the action

  Options: ~
    {focus}            (boolean)             Whether to move cursor to the
					     summary window.
					     Default: true


summary.close()                                       *timber.summary.close()*

  Close the summary window.


summary.toggle({opts})                               *timber.summary.toggle()*

  Same as `open`, but if the summary window is already open, close it.


summary.clear()                                       *timber.summary.clear()*

  Clear the summary window.

------------------------------------------------------------------------------
5.2. Keymaps                                     *timber.nvim-summary.keymaps*

|timber.nvim| provides default keymaps for the summary window:

  Action name                           Mapping      Description ~
  ------------------------------------------------------------------------------
  show_entry                            <CR>         Show the buffer that
                                                     contains the log entry
  ------------------------------------------------------------------------------
  jump_to_entry                         o            Same as show_entry, but
                                                     also move cursor to the
                                                     location
  ------------------------------------------------------------------------------
  next_entry                            ]]           Jump to next log entry
                                                     in the summary window
  ------------------------------------------------------------------------------
  prev_entry                            [[           Jump to prev log entry
                                                     in the summary window
  ------------------------------------------------------------------------------
  close                                 q            Close the summary window

==============================================================================
6. Configuration                                          *timber.nvim-config*

|timber.nvim| is highly configurable. The configuration is broke down into multiple
parts which are laid out in the following sections. It also provides a default
configuration. See |timber.nvim-config.default|.

To use a custom configuration, pass it to the *timber.setup* function.

timber.setup({opts})                                          *timber.setup()*

  Initialize the plugin.

  Parameters: ~
    {opts} (table)  options to pass to the setup function

  Options: ~
    {log_templates}            (table)            A table of log templates to
                                                  use. See |timber.nvim-config.log_templates|
    {batch_log_templates}      (table)            A table of batch log templates to
                                                  use. See |timber.nvim-config.log_templates|
    {template_placeholders}    (table)            A table of custom template placeholders to
                                                  use in log templates. See |timber.nvim-config.log-templates|
    {keymaps}                  (table)            Keymaps for actions and operators.
                                                  See |timber.nvim-config.keymaps|
    {highlight}                (table)            Highlight configuration for actions.
                                                  See |timber.nvim-config.highlight|
    {log_watcher}              (table)            A table of log watcher configuration.
                                                  See |timber.nvim-watchers|
    {log_summary}              (table)            A table of log watcher configuration.
                                                  See |timber.nvim-summary|

  See: ~
    |timber.nvim-config.default|
    |timber.nvim-config.log_templates|
    |timber.nvim-config.keymaps|
    |timber.nvim-config.highlight|

------------------------------------------------------------------------------
6.1. Default configuration                        *timber.nvim-config.default*
>lua
  {
    log_templates = {
      default = {
	-- Templates with auto_import: when inserting a log statement, the import line is inserted automatically
	-- Applies to batch log statements as well
	-- javascript = {
	--   [[logger.info('hello world')]],
	--   auto_import = [[const logger = require('pino')()]]
	-- }
	javascript = [[console.log("%log_target", %log_target)]],
	typescript = [[console.log("%log_target", %log_target)]],
	astro = [[console.log("%log_target", %log_target)]],
	vue = [[console.log("%log_target", %log_target)]],
	jsx = [[console.log("%log_target", %log_target)]],
	tsx = [[console.log("%log_target", %log_target)]],
	lua = [[print("%log_target", %log_target)]],
	luau = [[print("%log_target", %log_target)]],
	ruby = [[puts("%log_target #{%log_target}")]],
	elixir = [[IO.inspect(%log_target, label: "%log_target")]],
	go = [[log.Printf("%log_target: %v\n", %log_target)]],
	rust = [[println!("%log_target: {:#?}", %log_target);]],
	python = [[print(f"{%log_target=}")]],
	c = [[printf("%log_target: %s\n", %log_target);]],
	cpp = [[std::cout << "%log_target: " << %log_target << std::endl;]],
	java = [[System.out.println("%log_target: " + %log_target);]],
	c_sharp = [[Console.WriteLine($"%log_target: {%log_target}");]],
	odin = [[fmt.printfln("%log_target: %v", %log_target)]],
	bash = [[echo "%log_target: ${%log_target}"]],
	swift = [[print("%log_target:", %log_target)]],
	kotlin = [[println("%log_target: ${%log_target}")]],
	scala = [[println(s"%log_target: ${%log_target}")]],
	dart = [[print("%log_target: ${%log_target}");]],
      },
      plain = {
	javascript = [[console.log("%insert_cursor")]],
	typescript = [[console.log("%insert_cursor")]],
	astro = [[console.log("%insert_cursor")]],
	vue = [[console.log("%insert_cursor")]],
	jsx = [[console.log("%insert_cursor")]],
	tsx = [[console.log("%insert_cursor")]],
	lua = [[print("%insert_cursor")]],
	luau = [[print("%insert_cursor")]],
	ruby = [[puts("%insert_cursor")]],
	elixir = [[IO.puts(%insert_cursor)]],
	go = [[log.Println("%insert_cursor")]],
	rust = [[println!("%insert_cursor");]],
	python = [[print(f"%insert_cursor")]],
	c = [[printf("%insert_cursor \n");]],
	cpp = [[std::cout << "%insert_cursor" << std::endl;]],
	java = [[System.out.println("%insert_cursor");]],
	c_sharp = [[Console.WriteLine("%insert_cursor");]],
	odin = [[fmt.println("%insert_cursor")]],
	bash = [[echo "%insert_cursor"]],
	swift = [[print("%insert_cursor")]],
	kotlin = [[println("%insert_cursor")]],
	scala = [[println("%insert_cursor")]],
	dart = [[print("%insert_cursor");]],
      },
    },
    batch_log_templates = {
      default = {
	javascript = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	typescript = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	astro = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	vue = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	jsx = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	tsx = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
	lua = [[print(string.format("%repeat<%log_target=%s><, >", %repeat<%log_target><, >))]],
        luau = [[print(`%repeat<%log_target={%log_target}><, >`)]],
	ruby = [[puts("%repeat<%log_target: #{%log_target}><, >")]],
	elixir = [[IO.inspect({ %repeat<%log_target><, > })]],
	go = [[log.Printf("%repeat<%log_target: %v><, >\n", %repeat<%log_target><, >)]],
	rust = [[println!("%repeat<%log_target: {:#?}><, >", %repeat<%log_target><, >);]],
	python = [[print(f"%repeat<{%log_target=}><, >")]],
	c = [[printf("%repeat<%log_target: %s><, >\n", %repeat<%log_target><, >);]],
	cpp = [[std::cout %repeat<<< "%log_target: " << %log_target>< << "\n  " > << std::endl;]],
	java = [[System.out.printf("%repeat<%log_target=%s><, >%n", %repeat<%log_target><, >);]],
	c_sharp = [[Console.WriteLine($"%repeat<%log_target: {%log_target}><, >");]],
	odin = [[fmt.printfln("%repeat<%log_target: %v><, >", %repeat<%log_target><, >)]],
	bash = [[echo "%repeat<%log_target: ${%log_target}><, >"]],
	swift = [[print("%repeat<%log_target: %log_target><, >")]],
	kotlin = [[println("%repeat<%log_target=${%log_target}><, >")]],
	scala = [[println(s"%repeat<%log_target=${%log_target}><, >")]],
	dart = [[print(s"%repeat<%log_target=${%log_target}><, >");]],
      },
    },
    template_placeholders = {
      filename = function()
	return vim.fn.expand("%:t")
      end,
    },
    log_marker = "🪵",
    highlight = {
      on_insert = true,
      on_add_to_batch = true,
      on_summary_show_entry = true,
      duration = 500,
    },
    keymaps = {
      insert_log_below = "glj",
      insert_log_above = "glk",
      insert_plain_log_below = "glo",
      insert_plain_log_above = "gl<S-o>",
      insert_batch_log = "glb",
      add_log_targets_to_batch = "gla",
      insert_log_below_operator = "g<S-l>j",
      insert_log_above_operator = "g<S-l>k",
      insert_batch_log_operator = "g<S-l>b",
      add_log_targets_to_batch_operator = "g<S-l>a",
    },
    default_keymaps_enabled = true,
    log_watcher = {
      enabled = false,
      sources = {},
      preview_snippet_length = 32,
    },
    log_summary = {
      keymaps = {
	show_entry = "<CR>",
	jump_to_entry = "o",
	next_entry = "]]",
	prev_entry = "[[",
	close = "q",
      },
      default_keymaps_enabled = true,
      win = {
	width = { 60, 0.4 },
	position = "left",
	opts = {},
      },
    },
  }
<
------------------------------------------------------------------------------
6.2. Log templates                          *timber.nvim-config.log-templates*

`log_templates` determines the content of the log statements. The format is as
follows: `{ [template_name]: { [language]: string } }`. `batch_log_templates` is
similar, but for batch log statements.

To use the template, specify the template name when using actions.
>lua
  require('timber.actions').insert_log({
    template = "plain",
  })
<
Log template string supports special placeholders that will be expanded during
runtime to provide more information about the log context. The supported
placeholders are:

  - `%log_target`: the log target text >lua

      -- Template: [[print("LOG %log_target", %log_target)]]
      local foo = 1
      print("LOG foo", foo)
<
  - `%line_number`: the line number of the log target. If the log template
    doesn't have a log target, line_number will be the current line at the
    cursor. >lua

      -- Template: [[print("LOG %line_number", %log_target)]]
      local foo = 1
      print("LOG 1", foo)
<
  - `%filename`: the current filename >lua

      -- Template: [[print("LOG %filename", %log_target)]]
      local foo = 1
      print("LOG foo.lua", foo)
<
  - custom placeholders: users can define custom placeholders in the
    `template_placeholders` config. The placeholder is generated by a function
    that takes a `Timber.Actions.Context` as input. >lua

    ---@class Timber.Actions.Context
    ---@field log_target TSNode?
    ---@field log_position Timber.Actions.LogPosition

    timber.setup({
      log_templates = {
	default = {
	  lua = [[print("%hello " .. %log_target)]],
	},
      },
      template_placeholders = {
        hello = function(ctx)
          local line = ctx.log_target:start()
          return string.format("Hello World %s line %s", ctx.log_position, line)
        end,
      },
    })
<

`batch_log_templates` is similar, but for batch log statements. It supports
all placeholders supported by `log_templates`, plus:

  - `%repeat`: This placeholder will be repeatat for each log target in the
    batch. The format is: `%repeat<content><separator>`. Inside `content`, you
    can use all placeholders supported by `log_templates`. >lua

      -- Template: [[print(string.format("LOG %repeat<%log_target=%s><, >", %repeat<%log_target><, >))]]
      local foo = bar + baz
      print("LOG foo=%s, bar=%s, baz=%s", foo, bar, baz)
<
See the default configuration for some examples of template.

------------------------------------------------------------------------------
6.3. Keymaps                                      *timber.nvim-config.keymaps*

|timber.nvim| provides default keymaps for common actions:

  Action name                           Mapping      Lua API ~
  -----------------------------------------------------------------------------------------------------------------
  insert_log_below                      glj          vim.keymap.set({ "n", "v" }, "glj", function()
                                                       require("timber.actions").insert_log({ position = "below" })
                                                     end)
  -----------------------------------------------------------------------------------------------------------------
  insert_log_above                      glk          vim.keymap.set({ "n", "v" }, "glk", function()
                                                       require("timber.actions").insert_log({ position = "above" })
                                                     end)
  -----------------------------------------------------------------------------------------------------------------
  insert_batch_log                      glb          vim.keymap.set("n", "glb", function()
                                                       require("timber.actions").insert_batch_log()
                                                     end)
                                                     vim.keymap.set("v", "glb", function()
                                                       require("timber.actions").insert_batch_log({
							 auto_add = true
						       })
                                                     end)
  -----------------------------------------------------------------------------------------------------------------
  add_log_targets_to_batch              gla         vim.keymap.set({ "n", "v" }, "gla", function()
                                                     require("timber.actions").add_log_targets_to_batch()
                                                    end)
  -----------------------------------------------------------------------------------------------------------------
  insert_log_below_operator             g<S-l>j     vim.keymap.set("n", "g<S-l>j", function()
                                                      return require("timber.actions").insert_log({
                                                        position = "below",
                                                        operator = true
                                                      })
                                                    end, { expr = true })
  -----------------------------------------------------------------------------------------------------------------
  insert_log_above_operator             g<S-l>k     vim.keymap.set("n", "g<S-l>k", function()
                                                      return require("timber.actions").insert_log({
                                                        position = "above",
                                                        operator = true
                                                      })
                                                    end, { expr = true })
  -----------------------------------------------------------------------------------------------------------------
  insert_batch_log_operator             g<S-l>b     vim.keymap.set("n", "g<S-l>b", function()
                                                      return require("timber.actions").insert_log({ operator = true })
                                                    end, { expr = true })
  -----------------------------------------------------------------------------------------------------------------
  add_log_targets_to_batch_operator     g<S-l>a     vim.keymap.set("n", "g<S-l>a", function()
                                                      return require("timber.actions").add_log_targets_to_batch({
                                                        operator = true
                                                      })
                                                    end, { expr = true })

To disable default keymaps, you can either:

- Set `default_keymaps_enabled = false` in the config
- Set `keymaps[action] = false` to disable a specific action. For example: >lua

  keymaps = {
    insert_log_below = false,
    insert_log_above = false,
  }
<
Log template string supports special placeholders that will be expanded during
 will disable the default `insert_log_below` and `insert_log_above` keymaps.

------------------------------------------------------------------------------
6.4. Highlight					*timber.nvim-config.highlight*

Control highlight behaviors when insert log statements or add log targets to
batch. |timber.nvim| uses the following highlight groups:

  Group                                 Default                    Description ~
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.Insert                         Search                     Flash highlight for inserted log statements
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.AddToBatch                     Search                     Flash highlight for log targets added to batch
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.LogStatement                   -                          Log statements line
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.LogPlaceholderSnippet          DiagnosticVirtualTextInfo  Captured log output snippet
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.LogPlaceholderTime             -                          Captured log output time
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.FloatingWindowEntrySeparator   FloatBorder                Horizontal separator between entries in the floating window
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.SummaryEntryHeader               _                        Entry header in the summary window
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.SummaryEntryBodyHighlighted    PmenuSel                   Highlighted entry body in the summary window
  -----------------------------------------------------------------------------------------------------------------------------------
  Timber.SummaryJumpToLine              Search                     Flash highlight when jump to line in the summary window

vim:tw=78:ts=8:noet:ft=help:norl:
